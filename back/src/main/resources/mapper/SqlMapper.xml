<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.demo.mapper.SqlMapper">

    <select id="getCinemaInfo" parameterType="int" resultType="com.example.demo.DTO.JH.CinemaDTO">

        SELECT c.*,m.title,m.poster_path 
        FROM cinema c, movies m
        WHERE c.cinema_id = #{cinema_id}
        and m.movie_id = 1075676
        
    </select>

    <!-- <select id="getSchedules" parameterType="int" resultType="com.example.demo.DTO.ScheduleDTO">
        select * FROM schedule WHERE cinemaId = #{cinemaId}
    </select> -->

    <select id="getSchedulesTheater" parameterType="int" resultType="com.example.demo.DTO.JH.SchedulesTheaterDTO">
        select  s.schedule_id,s.cinema_id, s.movie_id, s.theater_id, s.start_time, s.end_time, s.created,
           m.title AS title, m.certification AS certification, m.poster_path AS poster_path,
           t.theater_type AS theater_type, t.screen_no AS screen_no,
           c.name AS name
        FROM schedule s
        JOIN movies m ON s.movie_id = m.movie_id
        JOIN theater t ON s.theater_id = t.theater_id
        JOIN cinema c ON s.cinema_id = c.cinema_id
        WHERE s.cinema_id = #{cinema_id}
        ORDER BY s.start_time 
    </select>

    <select id="getSeatsbyTheaterId" parameterType="map" resultType="com.example.demo.DTO.JH.SeatsDTO">
        select s.*, 
            case when b.seat_id is not null then 'yes' else 'no' end as status
            FROM seats s
            left JOIN booking b ON s.seat_id = b.seat_id and b.schedule_id = #{schedule_id}
            JOIN theater t ON s.link_id = t.link_id
            WHERE t.theater_id = #{theater_id}
            ORDER BY s.seat_id
    </select>

    <!-- 강현 -->
    <select id="findByEmail" resultType="com.example.demo.DTO.KH.CustomDTO"><!-- 돌려주는 곳이 com.exe.springmybatis.CustomDTO 임 -->
      SELECT user_id AS userid, email, password, name, nickname, points FROM users WHERE email = #{email}
    </select>

    <select id="findByName" resultType="com.example.demo.DTO.KH.CustomDTO">
      SELECT user_id AS userid, email, password, name FROM users WHERE name = #{name}
    </select>

    <update id="updatePassword" parameterType="map">
      UPDATE users
      SET password = #{password}
      WHERE email = #{email}
    </update>

    <select id="getNowMovies" resultType="com.example.demo.DTO.KH.NowMoviesDTO">
      select movie_id AS movieId, poster_path AS posterPath, title, vote_average AS voteAverage, certification, runtime from nowmovies
      ORDER BY vote_average DESC
    </select>

    <select id="getReccommendMovies" resultType="com.example.demo.DTO.KH.NowMoviesDTO">
      SELECT * FROM (
        SELECT 
            movie_id AS movieId, 
            poster_path AS posterPath, 
            title, 
            vote_average AS voteAverage, 
            certification, 
            runtime
        FROM 
            movies
        ORDER BY 
            vote_average DESC
        )
      <![CDATA[
      WHERE ROWNUM <= 20
      ]]>
    </select>

    <select id="getClassicMovies" resultType="com.example.demo.DTO.KH.NowMoviesDTO">
      SELECT * FROM (
        SELECT 
            movie_id AS movieId, 
            poster_path AS posterPath, 
            title, 
            release_date AS releaseDate,
             vote_average AS voteAverage,
            certification, 
            runtime
        FROM 
            movies
            <![CDATA[
        WHERE 
            release_date < TO_DATE('2010-12-31', 'YYYY-MM-DD')
        ]]>
        ORDER BY 
            vote_average DESC
      )
      <![CDATA[
      WHERE ROWNUM <= 30
      ]]>

    </select>

    <!-- 주용 xml -->

    <insert id="insertInquiry" parameterType="com.example.demo.DTO.JY.InquiryRequest">
        INSERT INTO CustomerInquiries (inquiry_id, name, phone_Number, email, title, content, created_at)
        VALUES (CustomerInquiries_seq.NEXTVAL, #{name}, #{phone_Number}, #{email}, #{title}, #{content}, SYSDATE)
    </insert>

    <select id="selectAllInquiries" resultType="com.example.demo.DTO.JY.InquiryRequest">
        SELECT * FROM CustomerInquiries
    </select>

    <delete id="deleteInquiryByTitle" parameterType="String">
        DELETE FROM CustomerInquiries WHERE title = #{title}
    </delete>
    
    <update id="updateInquiry" parameterType="com.example.demo.DTO.JY.InquiryRequest">
        UPDATE CUSTOMERINQUIRIES
            SET title = #{title},
                content = #{content}
            WHERE email = #{email}
    </update>

    <!-- 지영 Mapper.xml -->

    <!-- 서울 기준으로 시간을 맞추기 위해서 -->
    <select id="setSessionTimeZone">
        ALTER SESSION SET TIME_ZONE = 'Asia/Seoul'
    </select>

    <!-- INSERT 쿼리: Movies 테이블에 영화 정보를 삽입 -->
    <insert id="insertMovie" parameterType="com.example.demo.DTO.ZERO.MovieDTO">
        INSERT INTO movies (genre_ids, movie_id, original_language, overview, popularity, poster_path, release_date, title, vote_average, videos, runtime, certification)
        VALUES (#{genreIdsString}, #{movieId}, #{originalLanguage}, #{overview}, #{popularity}, #{posterPath}, #{releaseDate}, #{title}, #{voteAverage}, #{videos}, #{runtime}, #{certification})
    </insert>

    <select id="findMoviesByTitle" parameterType="string" resultType="com.example.demo.DTO.ZERO.MovieDTO">
       SELECT * FROM movies WHERE title LIKE CONCAT('%', #{title}, '%')
    </select>

    <select id="findById" resultType="com.example.demo.DTO.ZERO.MovieDTO">
      SELECT 
        MOVIE_ID as movieId,
        GENRE_IDS as genreIdsString, 
        ORIGINAL_LANGUAGE as originalLanguage, 
        OVERVIEW as overview, 
        POSTER_PATH as posterPath, 
        RELEASE_DATE as releaseDate, 
        TITLE as title, 
        VOTE_AVERAGE as voteAverage, 
        VIDEOS as videos, 
        RUNTIME as runtime, 
        CERTIFICATION as certification,
        POPULARITY as popularity
      FROM movies 
      WHERE MOVIE_ID = #{movieId}
    </select>

    <select id="checkWishlist" resultType="int">
        SELECT COUNT(*) FROM wishlist 
        WHERE user_id = #{userId} 
        AND movie_id = #{movieId}
    </select>

    <insert id="insertWishlist">
        INSERT INTO wishlist (user_id, movie_id, genre_ids, created_at)
        VALUES (#{userId}, #{movieId}, #{genreIds}, SYSDATE)
    </insert>

    <delete id="deleteWishlist">
        DELETE FROM wishlist 
        WHERE user_id = #{userId} 
          AND movie_id = #{movieId}
    </delete>

    <!-- 리뷰 저장 쿼리 -->
    <!-- mapper XML에서 createdAt 필드를 사용할 때, `jdbcType`을 `TIMESTAMP WITH TIME ZONE`으로 설정해 주세요. -->
    <insert id="saveReview" parameterType="com.example.demo.DTO.ZERO.ReviewsDTO">
        INSERT INTO MOVIEREVIEWS (REVIEW_ID, MOVIE_ID, USER_ID, RATING, REVIEW_TEXT, CREATED_AT)
        VALUES (MOVIEREVIEWS_SEQ.NEXTVAL, #{movieId}, #{userId}, #{rating}, #{reviewText,jdbcType=VARCHAR}, 
        #{createdAt,jdbcType=TIMESTAMP})
    </insert>


    <!-- 리뷰 수정 -->
    <update id="updateReview" parameterType="com.example.demo.DTO.ZERO.ReviewsDTO">
        UPDATE MOVIEREVIEWS
        SET REVIEW_TEXT = #{reviewText}, RATING = #{rating}, NICKNAME = #{nickname}
        WHERE REVIEW_ID = #{reviewId} AND USER_ID = #{userId}
    </update>

    <!-- 리뷰 삭제 -->
    <delete id="deleteReview" parameterType="map">
        DELETE FROM MOVIEREVIEWS WHERE REVIEW_ID = #{review_id} AND USER_ID = #{user_id}
    </delete>

    <select id="checkBookingExists" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM BOOKING
        WHERE user_id = #{userId} AND movie_id = #{movieId}
    </select>

    <!-- 특정 영화의 리뷰 목록 가져오기 -->
    <select id="findReviewsByMovieId" parameterType="int" resultType="com.example.demo.DTO.ZERO.ReviewsDTO" flushCache="true">
        SELECT 
            r.review_id AS reviewId,          -- DTO의 reviewId와 매칭
            r.movie_id AS movieId,            -- DTO의 movieId와 매칭
            r.user_id AS userId,              -- DTO의 userId와 매칭
            u.nickname AS nickname,           -- DTO의 nickname과 매칭
            r.rating AS rating,               -- DTO의 rating과 매칭
            r.review_text AS reviewText,      -- DTO의 reviewText와 매칭
            r.created_at AS createdAt         -- DTO의 createdAt과 매칭
        FROM MOVIEREVIEWS r
        JOIN users u ON r.user_id = u.user_id
        WHERE r.movie_id = #{movieId}
    </select>

    <!-- 예매페이지!!!!!!!!!!!!!! -->
     <select id="getCinemaInfojy" parameterType="int" resultType="com.example.demo.DTO.JH.CinemaDTO">

        SELECT * FROM cinema WHERE cinema_id = #{cinema_id}
        
    </select>

    <select id="getSchedulesTheaterjy" parameterType="int" resultType="com.example.demo.DTO.JH.SchedulesTheaterDTO">
        SELECT s.schedule_id, s.cinema_id, s.movie_id, s.theater_id, s.start_time, s.end_time, s.created,
            m.title AS title, m.certification AS certification,
            t.theater_type AS theater_type, t.screen_no AS screen_no
        FROM schedule s
        JOIN movies m ON s.movie_id = m.movie_id
        JOIN theater t ON s.theater_id = t.theater_id
        WHERE s.cinema_id = #{cinema_id}
        ORDER BY s.start_time
    </select>
    <!-- #{cinema_id} -->



    <!-- 특정 지역의 영화관 목록을 가져오는 SQL 쿼리 -->
    <select id="getCinemasByRegion" parameterType="String" resultType="com.example.demo.DTO.JH.CinemaDTO">
        SELECT * FROM cinema WHERE location LIKE #{region}
    </select>

    <!-- 상영작 20개 -->
    <select id="findNowMovieById" parameterType="int" resultType="com.example.demo.DTO.ZERO.NowMovieDTO">
        SELECT 
        MOVIE_ID as movieId,
        GENRE_IDS as genreIdsString, 
        ORIGINAL_LANGUAGE as originalLanguage, 
        OVERVIEW as overview, 
        POSTER_PATH as posterPath, 
        RELEASE_DATE as releaseDate, 
        TITLE as title, 
        VOTE_AVERAGE as voteAverage, 
        VIDEOS as videos, 
        RUNTIME as runtime, 
        CERTIFICATION as certification,
        POPULARITY as popularity
        FROM nowmovies 
        WHERE MOVIE_ID = #{movieId}
    </select>

    <select id="existsByMovieId" parameterType="int" resultType="int">
        SELECT movie_id FROM nowmovies WHERE movie_id = #{movieId}
    </select>


</mapper>